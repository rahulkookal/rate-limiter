name: Release Version on Merge

on:
  pull_request:
    types:
      - closed

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures full commit history for tagging

      - name: Set Up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"

      - name: Get Latest Git Tag
        id: latest_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Determine Version Type from PR Labels
        id: version_type
        run: |
          labels=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels" | jq -r '.[].name')

          if echo "$labels" | grep -q "major"; then
            echo "version_type=major" >> $GITHUB_ENV
          elif echo "$labels" | grep -q "minor"; then
            echo "version_type=minor" >> $GITHUB_ENV
          else
            echo "version_type=patch" >> $GITHUB_ENV
          fi

      - name: Calculate New Version
        id: bump_version
        run: |
          version=$(echo $latest_tag | sed 's/v//')
          IFS='.' read -r -a parts <<< "$version"

          case "${{ env.version_type }}" in
            major)
              parts[0]=$((parts[0] + 1))
              parts[1]=0
              parts[2]=0
              ;;
            minor)
              parts[1]=$((parts[1] + 1))
              parts[2]=0
              ;;
            patch)
              parts[2]=$((parts[2] + 1))
              ;;
          esac

          new_version="v${parts[0]}.${parts[1]}.${parts[2]}"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Create and Push Git Tag
        run: |
          git tag ${{ env.new_version }}
          git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git ${{ env.new_version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.new_version }}
          name: Release ${{ env.new_version }}
          body: "Auto-generated release for ${{ env.new_version }}"
          draft: false
          prerelease: false
